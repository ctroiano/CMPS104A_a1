head	1.6;
access;
symbols;
locks;
comment	@// @;


1.6
date	2015.04.10.02.31.47;	author -;	state -;
branches;
next	1.5;

1.5
date	2015.04.10.02.30.10;	author -;	state -;
branches;
next	1.4;

1.4
date	2015.04.10.02.29.20;	author -;	state -;
branches;
next	1.3;

1.3
date	2015.04.10.02.28.15;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.04.10.02.27.42;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.10.04.01.22.05;	author -;	state -;
branches;
next	;


desc
@@


1.6
log
@-
@
text
@
#include <assert.h>
#include <inttypes.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "astree.h"
#include "stringset.h"
#include "lyutils.h"

astree::astree (int symbol, int filenr, int linenr,
                int offset, const char* clexinfo):
        symbol (symbol), filenr (filenr), linenr (linenr),
        offset (offset), lexinfo (intern_stringset (clexinfo)) {
   DEBUGF ('f', "astree %p->{%d:%d.%d: %s: \"%s\"}\n",
           (void*) this, filenr, linenr, offset,
           get_yytname (symbol), lexinfo->c_str());
}

astree* adopt1 (astree* root, astree* child) {
   root->children.push_back (child);
   DEBUGF ('a', "%p (%s) adopting %p (%s)\n",
           root, root->lexinfo->c_str(),
           child, child->lexinfo->c_str());
   return root;
}

astree* adopt2 (astree* root, astree* left, astree* right) {
   adopt1 (root, left);
   adopt1 (root, right);
   return root;
}


static void dump_node (FILE* outfile, astree* node) {
   fprintf (outfile, "%p->{%s(%d) %ld:%ld.%03ld \"%s\" [",
            node, get_yytname (node->symbol), node->symbol,
            node->filenr, node->linenr, node->offset,
            node->lexinfo->c_str());
   bool need_space = false;
   for (size_t child = 0; child < node->children.size();
        ++child) {
      if (need_space) fprintf (outfile, " ");
      need_space = true;
      fprintf (outfile, "%p", node->children.at(child));
   }
   fprintf (outfile, "]}");
}

static void dump_astree_rec (FILE* outfile, astree* root,
                             int depth) {
   if (root == NULL) return;
   fprintf (outfile, "%*s%s ", depth * 3, "",
            root->lexinfo->c_str());
   dump_node (outfile, root);
   fprintf (outfile, "\n");
   for (size_t child = 0; child < root->children.size();
        ++child) {
      dump_astree_rec (outfile, root->children[child],
                       depth + 1);
   }
}

void dump_astree (FILE* outfile, astree* root) {
   dump_astree_rec (outfile, root, 0);
   fflush (NULL);
}

void yyprint (FILE* outfile, unsigned short toknum,
              astree* yyvaluep) {
   if (is_defined_token (toknum)) {
      dump_node (outfile, yyvaluep);
   }else {
      fprintf (outfile, "%s(%d)\n",
               get_yytname (toknum), toknum);
   }
   fflush (NULL);
}


void free_ast (astree* root) {
   while (not root->children.empty()) {
      astree* child = root->children.back();
      root->children.pop_back();
      free_ast (child);
   }
   DEBUGF ('f', "free [%p]-> %d:%d.%d: %s: \"%s\")\n",
           root, root->filenr, root->linenr, root->offset,
           get_yytname (root->symbol), root->lexinfo->c_str());
   delete root;
}

void free_ast2 (astree* tree1, astree* tree2) {
   free_ast (tree1);
   free_ast (tree2);
}

RCSC("$Id: astree.cpp,v 1.5 2015-04-09 19:30:10-07 - - $")

@


1.5
log
@-
@
text
@a35 6
astree* adopt1sym (astree* root, astree* child, int symbol) {
   root = adopt1 (root, child);
   root->symbol = symbol;
   return root;
}

d100 1
a100 1
RCSC("$Id: astree.cpp,v 1.4 2015-04-09 19:29:20-07 - - $")
@


1.4
log
@-
@
text
@d14 1
a14 1
                int offset, const char* lexinfo):
d16 1
a16 1
        offset (offset), lexinfo (intern_stringset (lexinfo)) {
d106 1
a106 1
RCSC("$Id: astree.cpp,v 1.3 2015-04-09 19:28:15-07 - - $")
@


1.3
log
@-
@
text
@d18 2
a19 2
           tree, tree->filenr, tree->linenr, tree->offset,
           get_yytname (tree->symbol), tree->lexinfo->c_str());
d106 1
a106 1
RCSC("$Id: astree.cpp,v 1.2 2015-04-09 19:27:42-07 - - $")
@


1.2
log
@-
@
text
@d13 2
a14 2
astree (int symbol, int filenr, int linenr,
        int offset, const char* lexinfo):
d106 1
a106 1
RCSC("$Id: astree.cpp,v 1.1 2014-10-03 18:22:05-07 - - $")
@


1.1
log
@-
@
text
@d13 4
a16 8
astree* new_astree (int symbol, int filenr, int linenr,
                    int offset, const char* lexinfo) {
   astree* tree = new astree();
   tree->symbol = symbol;
   tree->filenr = filenr;
   tree->linenr = linenr;
   tree->offset = offset;
   tree->lexinfo = intern_stringset (lexinfo);
a19 1
   return tree;
d106 1
a106 1
RCSC("$Id: astree.cc,v 1.1 2013-10-11 18:52:46-07 - - $")
@
