head	1.3;
access;
symbols;
locks;
comment	@// @;


1.3
date	2014.10.08.01.09.11;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.10.08.01.07.29;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.10.04.01.51.47;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@// $Id: cppstrtok.cpp,v 1.2 2014-10-07 18:07:29-07 - - $

// Use cpp to scan a file and print line numbers.
// Print out each input line read in, then strtok it for
// tokens.

#include <string>
using namespace std;

#include <errno.h>
#include <libgen.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <wait.h>

#include "auxlib.h"

const string CPP = "/usr/bin/cpp";
const size_t LINESIZE = 1024;

// Chomp the last character from a buffer if it is delim.
void chomp (char* string, char delim) {
   size_t len = strlen (string);
   if (len == 0) return;
   char* nlpos = string + len - 1;
   if (*nlpos == delim) *nlpos = '\0';
}


// Run cpp against the lines of the file.
void cpplines (FILE* pipe, char* filename) {
   int linenr = 1;
   char inputname[LINESIZE];
   strcpy (inputname, filename);
   for (;;) {
      char buffer[LINESIZE];
      char* fgets_rc = fgets (buffer, LINESIZE, pipe);
      if (fgets_rc == NULL) break;
      chomp (buffer, '\n');
      printf ("%s:line %d: [%s]\n", filename, linenr, buffer);
      // http://gcc.gnu.org/onlinedocs/cpp/Preprocessor-Output.html
      int sscanf_rc = sscanf (buffer, "# %d \"%[^\"]\"",
                              &linenr, filename);
      if (sscanf_rc == 2) {
         printf ("DIRECTIVE: line %d file \"%s\"\n", linenr, filename);
         continue;
      }
      char* savepos = NULL;
      char* bufptr = buffer;
      for (int tokenct = 1;; ++tokenct) {
         char* token = strtok_r (bufptr, " \t\n", &savepos);
         bufptr = NULL;
         if (token == NULL) break;
         printf ("token %d.%d: [%s]\n",
                 linenr, tokenct, token);
      }
      ++linenr;
   }
}

int main (int argc, char** argv) {
   set_execname (argv[0]);
   for (int argi = 1; argi < argc; ++argi) {
      char* filename = argv[argi];
      string command = CPP + " " + filename;
      printf ("command=\"%s\"\n", command.c_str());
      FILE* pipe = popen (command.c_str(), "r");
      if (pipe == NULL) {
         syserrprintf (command.c_str());
      }else {
         cpplines (pipe, filename);
         int pclose_rc = pclose (pipe);
         eprint_status (command.c_str(), pclose_rc);
      }
   }
   return get_exitstatus();
}

@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: cppstrtok.cpp,v 1.1 2014-10-03 18:51:47-07 - - $
d30 1
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: cppstrtok.cc,v 1.2 2013-09-20 19:38:26-07 - - $
d23 1
a23 1
void chomp (char *string, char delim) {
d26 1
a26 1
   char *nlpos = string + len - 1;
d31 1
a31 1
void cpplines (FILE *pipe, char *filename) {
d37 1
a37 1
      char *fgets_rc = fgets (buffer, LINESIZE, pipe);
d48 2
a49 2
      char *savepos = NULL;
      char *bufptr = buffer;
d51 1
a51 1
         char *token = strtok_r (bufptr, " \t\n", &savepos);
d61 1
a61 1
int main (int argc, char **argv) {
d64 1
a64 1
      char *filename = argv[argi];
d67 1
a67 1
      FILE *pipe = popen (command.c_str(), "r");
@
