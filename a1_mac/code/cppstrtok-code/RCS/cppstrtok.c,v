head	1.14;
access;
symbols;
locks;
comment	@ * @;


1.14
date	2011.10.04.03.20.08;	author -;	state -;
branches;
next	1.13;

1.13
date	2011.10.04.03.18.34;	author -;	state -;
branches;
next	1.12;

1.12
date	2011.10.04.03.17.01;	author -;	state -;
branches;
next	1.11;

1.11
date	2011.10.04.03.16.47;	author -;	state -;
branches;
next	1.10;

1.10
date	2011.10.04.03.15.35;	author -;	state -;
branches;
next	1.9;

1.9
date	2011.10.04.03.14.58;	author -;	state -;
branches;
next	1.8;

1.8
date	2011.10.04.03.13.24;	author -;	state -;
branches;
next	1.7;

1.7
date	2011.09.28.20.51.18;	author -;	state -;
branches;
next	1.6;

1.6
date	2011.09.23.02.23.19;	author -;	state -;
branches;
next	1.5;

1.5
date	2011.09.23.02.22.47;	author -;	state -;
branches;
next	1.4;

1.4
date	2011.09.01.02.18.03;	author -;	state -;
branches;
next	1.3;

1.3
date	2011.09.01.01.53.42;	author -;	state -;
branches;
next	1.2;

1.2
date	2011.09.01.01.51.47;	author -;	state -;
branches;
next	1.1;

1.1
date	2011.09.01.01.51.04;	author -;	state -;
branches;
next	;


desc
@@


1.14
log
@-
@
text
@// $Id: cppstrtok.c,v 1.13 2011-10-03 20:18:34-07 - - $

// Use cpp to scan a file and print line numbers.
// Print out each input line read in, then strtok it for
// tokens.

#define _GNU_SOURCE
#include <errno.h>
#include <libgen.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <wait.h>

int exit_status = EXIT_SUCCESS;
char *progname;
#define CPP "/usr/bin/cpp"
#define LINESIZE 1024

// Print a warning after a failed system call.
void syswarn (char *problem) {
   fflush (NULL);
   fprintf (stderr, "%s: %s: %s\n",
            progname, problem, strerror (errno));
   fflush (NULL);
   exit_status = EXIT_FAILURE;
}

// Chomp the last character from a buffer if it is delim.
void chomp (char *string, char delim) {
   size_t len = strlen (string);
   if (len == 0) return;
   char *nlpos = string + len - 1;
   if (*nlpos == delim) *nlpos = '\0';
}

// Run cpp against the lines of the file.
void cpplines (FILE *pipe, char *filename) {
   int linenr = 1;
   char inputname[LINESIZE];
   strcpy (inputname, filename);
   for (;;) {
      char buffer[LINESIZE];
      char *fgets_rc = fgets (buffer, LINESIZE, pipe);
      if (fgets_rc == NULL) break;
      chomp (buffer, '\n');
      printf ("%s:line %d: [%s]\n", filename, linenr, buffer);
      // http://gcc.gnu.org/onlinedocs/cpp/Preprocessor-Output.html
      int sscanf_rc = sscanf (buffer, "# %d \"%[^\"]\"",
                              &linenr, filename);
      if (sscanf_rc == 2) {
         printf ("DIRECTIVE: line %d file \"%s\"\n", linenr, filename);
         continue;
      }
      char *savepos = NULL;
      char *bufptr = buffer;
      for (int tokenct = 1;; ++tokenct) {
         char *token = strtok_r (bufptr, " \t\n", &savepos);
         bufptr = NULL;
         if (token == NULL) break;
         printf ("token %d.%d: [%s]\n",
                 linenr, tokenct, token);
      }
      ++linenr;
   }
}

// Print signal information.  
void eprint_signal (char *kind, int signal) {
   fprintf (stderr, ", %s %d", kind, signal);
   char *sigstr = strsignal (signal);
   if (sigstr != NULL) fprintf (stderr, " %s", sigstr);
}

// Print the status, signal, and core of an exiting process.
void eprint_status (char *command, int status) {
   fflush (NULL);
   if (status == 0) return;
   fprintf (stderr, "%s: status 0x%04X", command, status);
   if (WIFEXITED (status)) {
      fprintf (stderr, ", exit %d", WEXITSTATUS (status));
   }
   // LINTED (warning: cast from 32-bit integer to 8-bit integer)
   if (WIFSIGNALED (status)) {
      eprint_signal ("Terminated", WTERMSIG (status));
      #ifdef WCOREDUMP
      if (WCOREDUMP (status)) fprintf (stderr, ", core dumped");
      #endif
   }
   if (WIFSTOPPED (status)) {
      eprint_signal ("Stopped", WSTOPSIG (status));
   }
   if (WIFCONTINUED (status)) {
      fprintf (stderr, ", Continued");
   }
   fprintf (stderr, "\n");
   fflush (NULL);
}

int main (int argc, char **argv) {
   progname = basename (argv[0]);
   for (int argi = 1; argi < argc; ++argi) {
      char *filename = argv[argi];
      char command[strlen (CPP) + 1 + strlen (filename) + 1];
      strcpy (command, CPP);
      strcat (command, " ");
      strcat (command, filename);
      printf ("command=\"%s\"\n", command);
      FILE *pipe = popen (command, "r");
      if (pipe == NULL) {
         syswarn (command);
      }else {
         cpplines (pipe, filename);
         int pclose_rc = pclose (pipe);
         eprint_status (command, pclose_rc);
      }
   }
   return EXIT_SUCCESS;
}

//TEST// cid + foo*.*
//TEST// runprog -x cppstrtok.lis cppstrtok foo.oc
//TEST// catnv foo*.* >cppstrtok.input
//TEST// mkpspdf cppstrtok.ps cppstrtok.c cppstrtok.c.log \
//TEST//        cppstrtok.input cppstrtok.lis
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: cppstrtok.c,v 1.12 2011-10-03 20:17:01-07 - - $
d52 1
a52 1
         printf ("Directive: line %d file \"%s\"\n", linenr, filename);
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: cppstrtok.c,v 1.11 2011-10-03 20:16:47-07 - - $
d52 1
a52 2
         printf ("Directive: line %d, file \"%s\"\n",
                 linenr, filename);
d64 1
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: cppstrtok.c,v 1.10 2011-10-03 20:15:35-07 - - $
d51 1
a51 1
      if (sscanf_rc == 3) {
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: cppstrtok.c,v 1.7 2011/09/28 20:51:18 - - $
a47 1
      char flags[LINESIZE];
d49 2
a50 2
      int sscanf_rc = sscanf (buffer, "# %d \"%[^\"]\"%[^\n]",
                              &linenr, filename, flags);
d52 2
a53 2
         printf ("Directive: line %d, file \"%s\", flags \"%s\"\n",
                 linenr, filename, flags);
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: cppstrtok.c,v 1.8 2011-10-03 20:13:24-07 - - $
d46 3
d50 2
a51 2
      int sscanf_rc = sscanf (buffer, "# %d \"%[^\"]\"",
                              &linenr, filename);
d54 1
a54 1
                 linenr, filename);
a56 2
      chomp (buffer, '\n');
      printf ("%s:line %d: [%s]\n", filename, linenr, buffer);
a65 1
      ++linenr;
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: cppstrtok.c,v 1.7 2011-09-28 13:51:18-07 - - $
a45 1
      char flags[LINESIZE];
d47 2
a48 2
      int sscanf_rc = sscanf (buffer, "# %d \"%[^\"]\"%[^\n]",
                              &linenr, filename, flags);
d51 1
a51 1
                 linenr, filename, flags);
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: cppstrtok.c,v 1.6 2011-09-22 19:23:19-07 - - $
a45 2
      chomp (buffer, '\n');
      printf ("%s:line %d: [%s]\n", filename, linenr, buffer);
d55 2
d66 1
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: cppstrtok.c,v 1.5 2011-09-22 19:22:47-07 - - $
d109 1
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: cppstrtok.c,v 1.4 2011-08-31 19:18:03-07 - - $
d53 2
a54 2
         printf ("%sDirective: line %d, file \"%s\", flags \"%s\"\n",
                 INDENT, linenr, filename, flags);
d63 2
a64 2
         printf ("%stoken %d.%d: [%s]\n",
                 INDENT, linenr, tokenct, token);
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: cppstrtok.c,v 1.3 2011-08-31 18:53:42-07 - - $
a37 1
#define INDENT "    "
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: cppstrtok.c,v 1.2 2011-08-31 18:51:47-07 - - $
d122 1
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: cppstrtok.c,v 1.1 2011-08-31 18:51:04-07 - - $
d123 3
a125 1
//TEST// mkpspdf cppstrtok.ps cppstrtok.c cppstrtok.c.log cppstrtok.lis
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: cppstrtok.c,v 1.31 2011-08-31 15:44:45-07 - - $
d123 1
@
