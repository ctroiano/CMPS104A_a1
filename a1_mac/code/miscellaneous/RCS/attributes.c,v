head	1.27;
access;
symbols;
locks;
comment	@ * @;


1.27
date	2011.11.10.03.52.39;	author -;	state -;
branches;
next	1.26;

1.26
date	2011.11.10.03.51.45;	author -;	state -;
branches;
next	1.25;

1.25
date	2011.11.10.03.51.04;	author -;	state -;
branches;
next	1.24;

1.24
date	2011.11.10.03.48.53;	author -;	state -;
branches;
next	1.23;

1.23
date	2011.11.10.03.48.21;	author -;	state -;
branches;
next	1.22;

1.22
date	2011.11.10.03.47.12;	author -;	state -;
branches;
next	1.21;

1.21
date	2011.11.10.03.46.24;	author -;	state -;
branches;
next	1.20;

1.20
date	2011.11.10.03.44.54;	author -;	state -;
branches;
next	1.19;

1.19
date	2011.11.10.03.44.03;	author -;	state -;
branches;
next	1.18;

1.18
date	2011.11.08.04.12.41;	author -;	state -;
branches;
next	1.17;

1.17
date	2011.11.04.05.04.23;	author -;	state -;
branches;
next	1.16;

1.16
date	2011.11.04.05.03.49;	author -;	state -;
branches;
next	1.15;

1.15
date	2011.11.04.05.03.28;	author -;	state -;
branches;
next	1.14;

1.14
date	2011.11.04.05.02.15;	author -;	state -;
branches;
next	1.13;

1.13
date	2011.11.04.04.50.34;	author -;	state -;
branches;
next	1.12;

1.12
date	2011.11.04.04.50.13;	author -;	state -;
branches;
next	1.11;

1.11
date	2011.11.04.04.32.28;	author -;	state -;
branches;
next	1.10;

1.10
date	2011.11.04.04.32.09;	author -;	state -;
branches;
next	1.9;

1.9
date	2011.11.04.04.31.09;	author -;	state -;
branches;
next	1.8;

1.8
date	2011.11.04.04.30.21;	author -;	state -;
branches;
next	1.7;

1.7
date	2011.11.04.04.29.30;	author -;	state -;
branches;
next	1.6;

1.6
date	2011.11.04.04.28.40;	author -;	state -;
branches;
next	1.5;

1.5
date	2011.11.04.04.27.47;	author -;	state -;
branches;
next	1.4;

1.4
date	2011.11.04.04.27.32;	author -;	state -;
branches;
next	1.3;

1.3
date	2011.11.04.04.27.03;	author -;	state -;
branches;
next	1.2;

1.2
date	2011.11.04.04.26.35;	author -;	state -;
branches;
next	1.1;

1.1
date	2011.11.04.04.00.19;	author -;	state -;
branches;
next	;


desc
@@


1.27
log
@-
@
text
@// $Id: attributes.c,v 1.26 2011-11-09 19:51:45-08 - - $

//
// Example which shows how to manage attributes as bitsets and
// how to print them.
//

#include <limits.h>
#include <stdio.h>
#include <stdlib.h>

typedef unsigned long bitset_t;

typedef enum {FALSE = 0, TRUE = 1} bool;

enum {
   ATTR_INDEX_VOID     =  0,
   ATTR_INDEX_BOOL     =  1,
   ATTR_INDEX_CHAR     =  2,
   ATTR_INDEX_INT      =  3,
   ATTR_INDEX_NULL     =  4,
   ATTR_INDEX_STRING   =  5,
   ATTR_INDEX_STRUCT   =  6,
   ATTR_INDEX_ARRAY    =  7,
   ATTR_INDEX_FUNCTION =  8,
   ATTR_INDEX_VARIABLE =  9,
   ATTR_INDEX_FIELD    = 10,
   ATTR_INDEX_TYPEID   = 11,
   ATTR_INDEX_PARAM    = 12,
   ATTR_INDEX_LVALUE   = 13,
   ATTR_INDEX_CONST    = 14,
   ATTR_INDEX_VREG     = 15,
   ATTR_INDEX_VADDR    = 16,
};

const bitset_t ATTR_VOID     = 1 << ATTR_INDEX_VOID;
const bitset_t ATTR_BOOL     = 1 << ATTR_INDEX_BOOL;
const bitset_t ATTR_CHAR     = 1 << ATTR_INDEX_CHAR;
const bitset_t ATTR_INT      = 1 << ATTR_INDEX_INT;
const bitset_t ATTR_NULL     = 1 << ATTR_INDEX_NULL;
const bitset_t ATTR_STRING   = 1 << ATTR_INDEX_STRING;
const bitset_t ATTR_STRUCT   = 1 << ATTR_INDEX_STRUCT;
const bitset_t ATTR_ARRAY    = 1 << ATTR_INDEX_ARRAY;
const bitset_t ATTR_FUNCTION = 1 << ATTR_INDEX_FUNCTION;
const bitset_t ATTR_VARIABLE = 1 << ATTR_INDEX_VARIABLE;
const bitset_t ATTR_FIELD    = 1 << ATTR_INDEX_FIELD;
const bitset_t ATTR_TYPEID   = 1 << ATTR_INDEX_TYPEID;
const bitset_t ATTR_PARAM    = 1 << ATTR_INDEX_PARAM;
const bitset_t ATTR_LVALUE   = 1 << ATTR_INDEX_LVALUE;
const bitset_t ATTR_CONST    = 1 << ATTR_INDEX_CONST;
const bitset_t ATTR_VREG     = 1 << ATTR_INDEX_VREG;
const bitset_t ATTR_VADDR    = 1 << ATTR_INDEX_VADDR;

bitset_t bitset (int attribute_index) {
   return 1L << attribute_index;
}


bool is_primitive (bitset_t attributes) {
   return attributes
          & (ATTR_BOOL | ATTR_CHAR | ATTR_INT)
       && ! (attributes | ATTR_ARRAY);
}

bool is_reference (bitset_t attributes) {
   return attributes
          & (ATTR_NULL | ATTR_STRING | ATTR_STRUCT | ATTR_ARRAY)
       && TRUE;
}

// The following initialization style is a gcc-ism and will
// not work with some C compilers, and confuses lint.
const char *attr_names[] = {
   [ATTR_INDEX_VOID    ] "void"    ,
   [ATTR_INDEX_BOOL    ] "bool"    ,
   [ATTR_INDEX_CHAR    ] "char"    ,
   [ATTR_INDEX_INT     ] "int"     ,
   [ATTR_INDEX_NULL    ] "null"    ,
   [ATTR_INDEX_STRING  ] "string"  ,
   [ATTR_INDEX_STRUCT  ] "struct"  ,
   [ATTR_INDEX_ARRAY   ] "array"   ,
   [ATTR_INDEX_FUNCTION] "function",
   [ATTR_INDEX_VARIABLE] "variable",
   [ATTR_INDEX_FIELD   ] "field"   ,
   [ATTR_INDEX_TYPEID  ] "typeid"  ,
   [ATTR_INDEX_PARAM   ] "param"   ,
   [ATTR_INDEX_LVALUE  ] "lvalue"  ,
   [ATTR_INDEX_CONST   ] "const"   ,
   [ATTR_INDEX_VREG    ] "vreg"    ,
   [ATTR_INDEX_VADDR   ] "vaddr"   ,
};

void print_attributes (bitset_t attributes) {
   ssize_t size = sizeof attr_names / sizeof *attr_names;
   for (int index = 0; index < size; ++index) {
      if (attributes & bitset (index)) {
         printf (" %s", attr_names [index]);
      }
   }
}

int main (void) {
   printf ("Number of bits in a bitset = %lu\n",
           CHAR_BIT * sizeof (bitset_t));
   for (bitset_t set = 0xF; set < 1L << 32; set <<= 4) {
      printf ("bitset 0x%016lX =", set);
      print_attributes (set);
      printf ("\n");
   }
   return EXIT_SUCCESS;
}

/*
//TEST// runprog -x attributes.lis attributes
//TEST// mkpspdf attributes.ps \
//TEST//    attributes.c attributes.c.log attributes.lis
*/

@


1.26
log
@-
@
text
@d1 1
a1 1
// $Id: attributes.c,v 1.25 2011-11-09 19:51:04-08 - - $
d105 2
a106 2
   for (bitset_t set = 0xF; set < 0xFFFFFFFFL; set <<= 4) {
      printf ("bitset 0x%08lX =", set);
@


1.25
log
@-
@
text
@d1 1
a1 1
// $Id: attributes.c,v 1.24 2011-11-09 19:48:53-08 - - $
d105 1
a105 1
   for (bitset_t set = 0xF; set < 0xF00000L; set <<= 4) {
@


1.24
log
@-
@
text
@d1 1
a1 1
// $Id: attributes.c,v 1.23 2011-11-09 19:48:21-08 - - $
d105 1
a105 1
   for (bitset_t set = 0xF; set < 0xF0000L; set <<= 4) {
@


1.23
log
@-
@
text
@d1 1
a1 1
// $Id: attributes.c,v 1.22 2011-11-09 19:47:12-08 - - $
d94 1
a94 1
   size_t size = sizeof attr_names / sizeof *attr_names;
@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: attributes.c,v 1.21 2011-11-09 19:46:24-08 - - $
a53 1

d58 1
d95 1
a95 1
   for (size_t index = 0; index < size; ++index) {
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: attributes.c,v 1.20 2011-11-09 19:44:54-08 - - $
d94 2
a95 2
   ssize_t size = sizeof attr_names / sizeof *attr_names;
   for (int index = 0; index < size; ++index) {
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: attributes.c,v 1.19 2011-11-09 19:44:03-08 - - $
d113 6
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: attributes.c,v 1.18 2011-11-07 20:12:41-08 - - $
d105 1
a105 1
   for (bitset_t set = 0xF; set < 0xF0000; set <<= 4) {
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: attributes.c,v 1.17 2011-11-03 22:04:23-07 - - $
a99 1
   printf ("\n");
d105 5
a109 3
   print_attributes (0x0000FF);
   print_attributes (0x00FF00);
   print_attributes (0xFF0000);
d112 1
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: attributes.c,v 1.16 2011-11-03 22:03:49-07 - - $
d72 1
a72 1
// not work with some C compilers, and freaks out lint.
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: attributes.c,v 1.15 2011-11-03 22:03:28-07 - - $
d71 2
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: attributes.c,v 1.14 2011-11-03 22:02:15-07 - - $
d107 1
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: attributes.c,v 1.13 2011-11-03 21:50:34-07 - - $
d54 1
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: attributes.c,v 1.12 2011-11-03 21:50:13-07 - - $
d101 1
a101 1
   printf ("Number of bits in a bitset = %d\n",
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: attributes.c,v 1.11 2011-11-03 21:32:28-07 - - $
d8 1
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: attributes.c,v 1.9 2011-11-03 21:31:09-07 - - $
d100 2
@


1.10
log
@-
@
text
@d90 1
a90 1
   size_t size = sizeof attr_names / sizeof *attr_names;
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: attributes.c,v 1.8 2011-11-03 21:30:21-07 - - $
d90 2
a91 3
   for (size_t index = 0;
        index < sizeof attr_names / sizeof *attr_names;
        ++index) {
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: attributes.c,v 1.7 2011-11-03 21:29:30-07 - - $
d101 3
a103 4
   print_attributes (0x000F);
   print_attributes (0x00F0);
   print_attributes (0x0F00);
   print_attributes (0xF000);
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: attributes.c,v 1.6 2011-11-03 21:28:40-07 - - $
d90 1
a90 1
   for (int index = 0;
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: attributes.c,v 1.5 2011-11-03 21:27:47-07 - - $
d58 3
a60 2
   return attributes & (ATTR_BOOL | ATTR_CHAR | ATTR_INT)
          && ! (attributes | ATTR_ARRAY);
d64 3
a66 2
   return TRUE && attributes
          & (ATTR_NULL | ATTR_STRING | ATTR_STRUCT | ATTR_ARRAY);
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: attributes.c,v 1.4 2011-11-03 21:27:32-07 - - $
d63 1
a63 1
   return attributes
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: attributes.c,v 1.3 2011-11-03 21:27:03-07 - - $
d54 1
a54 1
   return 1 << attribute_index;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: attributes.c,v 1.2 2011-11-03 21:26:35-07 - - $
d15 19
a33 17
const int ATTR_INDEX_VOID     =  0;
const int ATTR_INDEX_BOOL     =  1;
const int ATTR_INDEX_CHAR     =  2;
const int ATTR_INDEX_INT      =  3;
const int ATTR_INDEX_NULL     =  4;
const int ATTR_INDEX_STRING   =  5;
const int ATTR_INDEX_STRUCT   =  6;
const int ATTR_INDEX_ARRAY    =  7;
const int ATTR_INDEX_FUNCTION =  8;
const int ATTR_INDEX_VARIABLE =  9;
const int ATTR_INDEX_FIELD    = 10;
const int ATTR_INDEX_TYPEID   = 11;
const int ATTR_INDEX_PARAM    = 12;
const int ATTR_INDEX_LVALUE   = 13;
const int ATTR_INDEX_CONST    = 14;
const int ATTR_INDEX_VREG     = 15;
const int ATTR_INDEX_VADDR    = 16;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id$
d15 17
a31 17
const int ATTR_INDEX_VOID     =  0,
const int ATTR_INDEX_BOOL     =  1,
const int ATTR_INDEX_CHAR     =  2,
const int ATTR_INDEX_INT      =  3,
const int ATTR_INDEX_NULL     =  4,
const int ATTR_INDEX_STRING   =  5,
const int ATTR_INDEX_STRUCT   =  6,
const int ATTR_INDEX_ARRAY    =  7,
const int ATTR_INDEX_FUNCTION =  8,
const int ATTR_INDEX_VARIABLE =  9,
const int ATTR_INDEX_FIELD    = 10,
const int ATTR_INDEX_TYPEID   = 11,
const int ATTR_INDEX_PARAM    = 12,
const int ATTR_INDEX_LVALUE   = 13,
const int ATTR_INDEX_CONST    = 14,
const int ATTR_INDEX_VREG     = 15,
const int ATTR_INDEX_VADDR    = 16,
@


1.1
log
@-
@
text
@d1 1
d3 80
a82 3
int a[] = {
[1]=2,
[2]=3,
d84 18
@
