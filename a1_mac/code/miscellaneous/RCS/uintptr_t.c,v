head	1.17;
access;
symbols;
locks;
comment	@ * @;


1.17
date	2011.11.10.03.57.03;	author -;	state -;
branches;
next	1.16;

1.16
date	2011.11.10.03.56.39;	author -;	state -;
branches;
next	1.15;

1.15
date	2011.11.10.03.55.41;	author -;	state -;
branches;
next	1.14;

1.14
date	2011.11.10.03.54.51;	author -;	state -;
branches;
next	1.13;

1.13
date	2011.11.04.02.20.02;	author -;	state -;
branches;
next	1.12;

1.12
date	2011.11.04.02.15.52;	author -;	state -;
branches;
next	1.11;

1.11
date	2011.11.04.02.15.36;	author -;	state -;
branches;
next	1.10;

1.10
date	2011.11.04.02.14.56;	author -;	state -;
branches;
next	1.9;

1.9
date	2011.11.04.02.14.43;	author -;	state -;
branches;
next	1.8;

1.8
date	2011.11.04.02.14.06;	author -;	state -;
branches;
next	1.7;

1.7
date	2011.11.04.02.12.08;	author -;	state -;
branches;
next	1.6;

1.6
date	2011.11.04.02.11.29;	author -;	state -;
branches;
next	1.5;

1.5
date	2011.11.04.02.10.53;	author -;	state -;
branches;
next	1.4;

1.4
date	2011.11.04.02.10.38;	author -;	state -;
branches;
next	1.3;

1.3
date	2011.11.04.02.09.51;	author -;	state -;
branches;
next	1.2;

1.2
date	2011.11.04.02.09.31;	author -;	state -;
branches;
next	1.1;

1.1
date	2011.09.01.02.29.39;	author -;	state -;
branches;
next	;


desc
@@


1.17
log
@-
@
text
@// $Id: uintptr_t.c,v 1.16 2011-11-09 19:56:39-08 - - $

// Illustrate the idea of using pointers as uintptr_t values
// for indexing into the symbol hash-stack table.

#include <assert.h>
#include <inttypes.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct node {
   char *string;
} *node;

int main (int argc, char **argv) {
   node *pseudo = calloc ((ssize_t) argc, sizeof (node));
   assert (pseudo != 0);
   for (int argi = 0; argi < argc; ++argi) {
      node new = malloc (sizeof (struct node));
      assert (new != NULL);
      new->string = strdup (argv[argi]);
      assert (new->string);
      pseudo[argi] = new;
   }
   for (int argi = 0; argi < argc; ++argi) {
      node ref = pseudo[argi];
      uintptr_t hashcode = (uintptr_t) ref;
      printf ("%16p %16" PRIxPTR " %6" PRIdPTR " %6" PRIdPTR
              " %6" PRIdPTR "\n",
              ref, hashcode, hashcode % 31, hashcode % 127,
              hashcode % 511);
   }
   return EXIT_SUCCESS;
}

//TEST// runprog -x uintptr_t.lis uintptr_t *
//TEST// mkpspdf uintptr_t.ps uintptr_t.c uintptr_t.c.log uintptr_t.lis

@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: uintptr_t.c,v 1.15 2011-11-09 19:55:41-08 - - $
d37 1
a37 1
//TEST// runprog -x uintptr_t.lis uintptr_t *.[hc]
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: uintptr_t.c,v 1.14 2011-11-09 19:54:51-08 - - $
d37 1
a37 1
//TEST// runprog -x uintptr_t.lis uintptr_t *
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: uintptr_t.c,v 1.13 2011-11-03 19:20:02-07 - - $
d37 1
a37 1
//TEST// runprog -x uintptr_t.lis uintptr_t
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: uintptr_t.c,v 1.12 2011-11-03 19:15:52-07 - - $
d37 3
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: uintptr_t.c,v 1.8 2011-11-03 19:14:06-07 - - $
d29 4
a32 2
      printf ("%16p %16" PRIxPTR " %10" PRIdPTR " %10" PRIdPTR "\n",
              ref, hashcode, hashcode % 31, hashcode % 127);
d36 1
@


1.11
log
@-
@
text
@d17 1
a17 2
   size_t size = (ssize_t) argc;
   node *pseudo = calloc (size, sizeof (node));
@


1.10
log
@-
@
text
@d17 1
a17 1
   size_t size = (size_t) argc;
@


1.9
log
@-
@
text
@d17 1
a17 1
   size_t size = argc;
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: uintptr_t.c,v 1.7 2011-11-03 19:12:08-07 - - $
d17 2
a18 1
   node *pseudo = calloc ((size_t) argc, sizeof (node));
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: uintptr_t.c,v 1.5 2011-11-03 19:10:53-07 - - $
d29 1
a29 1
      printf ("%16p %16" PRIxPTR " %10u %10u\n",
@


1.6
log
@-
@
text
@d17 1
a17 1
   node *pseudo = calloc (argc, sizeof (node));
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: uintptr_t.c,v 1.4 2011-11-03 19:10:38-07 - - $
d29 1
a29 1
      printf ("%16p %16" PRIxPTR " %10d %10d\n",
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: uintptr_t.c,v 1.2 2011-11-03 19:09:31-07 - - $
d17 1
a17 1
   node pseudo = calloc (argc, sizeof (node));
@


1.3
log
@-
@
text
@d17 1
a17 1
   node *pseudo = calloc (argv, sizeof (node));
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id$
d10 1
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: uintptr_t.c,v 1.6 2009-11-03 19:05:05-08 - - $
d3 2
a4 5
//
// Illustrate the use of uintptr_t to turn a pointer into an
// integer of the appropriate kind, such as for indexing into
// a hash table.
//
d11 4
d16 14
a29 8
   int count = argc < 10 ? 10 : atoi (argv[1]);
   printf ("sizeof (char*) = %d, sizeof (uintptr_t) = %d\n",
            sizeof (char*),      sizeof (uintptr_t));
   for (int bytes = 0; bytes < count; ++bytes) {
      char *pointer = malloc (bytes * 10);
      uintptr_t ptr_as_int = (uintptr_t) pointer >> 3;
      printf ("pointer = %p, ptr_as_int = %d\n",
              (void*) pointer, ptr_as_int);
@
