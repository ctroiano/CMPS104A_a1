head	1.8;
access;
symbols;
locks;
comment	@ * @;


1.8
date	2011.09.23.01.32.30;	author -;	state -;
branches;
next	1.7;

1.7
date	2011.09.23.01.32.20;	author -;	state -;
branches;
next	1.6;

1.6
date	2011.09.23.01.31.55;	author -;	state -;
branches;
next	1.5;

1.5
date	2011.09.23.01.31.02;	author -;	state -;
branches;
next	1.4;

1.4
date	2011.09.23.01.30.40;	author -;	state -;
branches;
next	1.3;

1.3
date	2011.09.23.01.29.51;	author -;	state -;
branches;
next	1.2;

1.2
date	2011.09.23.01.28.43;	author -;	state -;
branches;
next	1.1;

1.1
date	2011.09.23.01.28.10;	author -;	state -;
branches;
next	;


desc
@@


1.8
log
@-
@
text
@// $Id: test-strhash.c,v 1.7 2011-09-22 18:32:20-07 - - $

//
// This program is not part of your project.  It exists just to 
// illustrate how to obtain and print hash values.  Each element
// of data is hashed and printed along with its hashcode.
//

#include <stdio.h>
#include <stdlib.h>

#include "strhash.h"

char *data[] = {
   NULL,
   "=",
   "0",
   "9",
   "A",
   "Z",
   "a",
   "z",
   "foo",
   "bar",
   "baz",
   "qux",
   "quux",
   "quuux",
   "quuuux",
   "quuuuux",
   "quuuuuux",
   "quuuuuuux",
   "quuuuuuuux",
   "TESTDATA",
};

int main (int argc, char **argv) {
   if (argc == argc) data[0] = argv[0];
   int index;
   int data_size = sizeof data / sizeof *data;
   for (index = 0; index < data_size; ++index) {
      char *str = data[index];
      hashcode_t hashcode = strhash (str);
      printf ("%10u = strhash (\"%s\")\n", hashcode, str);
   }
   printf ("%10u = 0xFFFFFFFFu\n", 0xFFFFFFFFu);
   return EXIT_SUCCESS;
}

@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: test-strhash.c,v 1.5 2011-09-22 18:31:02-07 - - $
a36 1
// LINTED (argument unused in function)
@


1.6
log
@-
@
text
@d39 1
a39 1
   data[0] = argv[0];
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: test-strhash.c,v 1.3 2011-09-22 18:29:51-07 - - $
d15 1
d39 1
@


1.4
log
@-
@
text
@d36 1
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: test-strhash.c,v 1.2 2011-09-22 18:28:43-07 - - $
d38 2
a39 1
   for (index = 0; index < sizeof data / sizeof *data; ++index) {
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: test-strhash.c,v 1.1 2011-09-22 18:28:10-07 - - $
d41 1
a41 1
      xprintf ("%10u = strhash (\"%s\")\n", hashcode, str);
d43 1
a43 1
   xprintf ("%10u = 0xFFFFFFFFu\n", 0xFFFFFFFFu);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: hashfn.c,v 1.1 2010-11-04 19:44:16-07 - - $
d12 1
a12 1
#include "../code/strhash.h"
@
